{"ast":null,"code":"var fetch = require(\"node-fetch\");\n\nvar FormatHourMinutes = function FormatHourMinutes(time) {\n  var newMinutes = (time.getMinutes() < 10 ? '0' : '') + time.getMinutes().toString();\n  var formattedTime = time.getHours().toString() + ':' + newMinutes;\n  return formattedTime;\n};\n\nvar determineInterval = function determineInterval(startTime, endTime) {\n  var timeIntervalsArray = [];\n\n  while (startTime < endTime) {\n    timeIntervalsArray.push(FormatHourMinutes(startTime));\n    startTime.setMinutes(startTime.getMinutes() + 30);\n  }\n\n  return timeIntervalsArray;\n};\n\nvar padIntervals = function padIntervals(responseArray) {\n  var maxLenght = 0;\n\n  for (var i = 0; i < responseArray.length; i++) {\n    var intervalLength = responseArray[i].timeIntervals.length;\n\n    if (intervalLength > maxLenght) {\n      maxLenght = intervalLength;\n    }\n  }\n\n  for (var _i = 0; _i < responseArray.length; _i++) {\n    console.log(\"max lenght is \" + maxLenght);\n\n    while (responseArray[_i].timeIntervals.length < maxLenght) {\n      responseArray[_i].timeIntervals.push('-');\n    }\n\n    return responseArray;\n  }\n};\n\nvar parseTime = function parseTime(time) {\n  return new Date(Date.parse(time));\n};\n\nvar formatDayOfTheWeekDict = {\n  1: \"MO\",\n  2: \"TU\",\n  3: \"WE\",\n  4: \"TH\",\n  5: \"FR\",\n  6: \"SA\",\n  7: \"SU\"\n};\nvar formatMonthDict = {\n  1: \"Jan\",\n  2: \"Feb\",\n  3: \"Mar\",\n  4: \"Apr\",\n  5: \"May\",\n  6: \"Jun\",\n  7: \"Jul\",\n  8: \"Aug\",\n  9: \"Sep\",\n  10: \"Oct\",\n  11: \"Nov\",\n  12: \"Dec\"\n};\n\nvar processDates = function processDates(response) {\n  var newArray = [];\n\n  for (var i = 0; i < response.length; i++) {\n    var startTime = parseTime(response[i]['startAt']);\n    var endTime = parseTime(response[i]['endAt']);\n    newArray.push({\n      'day': response[i]['day'],\n      'month': response[i]['month'],\n      'year': response[i]['year'],\n      'dayOfTheWeek': formatDayOfTheWeekDict[response[i]['dayOfTheWeek']],\n      'dayMonth': formatMonthDict[response[i]['month']] + ' ' + response[i]['day'],\n      'start': startTime,\n      'end': endTime,\n      'timeIntervals': determineInterval(startTime, endTime)\n    });\n  }\n\n  ;\n  newArray;\n  return newArray;\n};\n\nvar motiveIdDict = {\n  'technical': '61eea350ddf6c500149ae2cb',\n  'cultural': '61eea367ddf6c500149ae2cc',\n  'introduction': '61379ba159d4940022b6c929'\n};\nexport var defaultQueryArgs = {\n  \"from\": '2022-02-07T23:00:00.000Z',\n  \"to\": '2022-02-16T23:00:00.000Z',\n  \"is_new_patient\": \"true\",\n  \"motive_id\": motiveIdDict['technical']\n};\nexport default function getAgenda(queryArgs) {\n  var query = \"https://staging-api.rosa.be/api/availabilities?from=\" + queryArgs['from'] + \"&to=\" + queryArgs['to'] + \"&motive_id=\" + queryArgs['motive_id'] + \"&is_new_patient=\" + queryArgs['is_new_patient'] + \"&calendar_ids=61379ba159d4940022b6c928&state=open\";\n  console.log('AYMERIC');\n  return fetch(query).then(function (response) {\n    return response.json();\n  }).then(function (json) {\n    return processDates(json);\n  }).then(function (processedJson) {\n    return padIntervals(processedJson);\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\n;","map":{"version":3,"sources":["/Users/aymericdelabrousse/Documents/git/nx_expo/rosa-nx-expo-workspace/apps/patient-staging-expo/network/calendarAPI.js"],"names":["fetch","require","FormatHourMinutes","time","newMinutes","getMinutes","toString","formattedTime","getHours","determineInterval","startTime","endTime","timeIntervalsArray","push","setMinutes","padIntervals","responseArray","maxLenght","i","length","intervalLength","timeIntervals","console","log","parseTime","Date","parse","formatDayOfTheWeekDict","formatMonthDict","processDates","response","newArray","motiveIdDict","defaultQueryArgs","getAgenda","queryArgs","query","then","json","processedJson","catch","error"],"mappings":"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","sourcesContent":["var fetch = require(\"node-fetch\");\n\nconst FormatHourMinutes = (time) => {\n    const newMinutes = (time.getMinutes() < 10? '0':'') + time.getMinutes().toString()\n    const formattedTime = time.getHours().toString() + ':' + newMinutes\n    return formattedTime\n}\n\nconst determineInterval = (startTime, endTime) => {\n    let timeIntervalsArray = [];\n    while(startTime < endTime) {\n        timeIntervalsArray.push(FormatHourMinutes(startTime));\n        startTime.setMinutes(startTime.getMinutes() + 30);\n    }\n    return timeIntervalsArray;\n}\n\nconst padIntervals = (responseArray) => {\n    // function to pad the time intervals so that \n    //all the intervals have the same size as the biggest one\n\n    let maxLenght = 0;\n    for (let i=0; i<responseArray.length; i++) {\n        const intervalLength = responseArray[i].timeIntervals.length;\n        if (intervalLength > maxLenght) {\n            maxLenght = intervalLength;\n        }\n    }\n    for (let i=0; i<responseArray.length; i++) {\n        console.log(`max lenght is ${maxLenght}`)\n        while(responseArray[i].timeIntervals.length < maxLenght) {\n            responseArray[i].timeIntervals.push('-')\n        }\n    return responseArray\n    }\n}\n\n\nconst parseTime = (time) => {\n    return new Date((Date.parse(time)));\n}\n\nconst formatDayOfTheWeekDict = {\n    1: \"MO\",\n    2: \"TU\",\n    3: \"WE\",\n    4: \"TH\",\n    5: \"FR\",\n    6: \"SA\",\n    7: \"SU\",\n}\n\nconst formatMonthDict = {\n    1: \"Jan\",\n    2: \"Feb\",\n    3: \"Mar\",\n    4: \"Apr\",\n    5: \"May\",\n    6: \"Jun\",\n    7: \"Jul\",\n    8: \"Aug\",\n    9: \"Sep\",\n    10: \"Oct\",\n    11: \"Nov\",\n    12: \"Dec\",\n}\n\nconst processDates = (response) => {\n    let newArray = [];\n    for (let i=0; i<response.length; i++) {\n        const startTime = parseTime(response[i]['startAt'])\n        const endTime = parseTime(response[i]['endAt'])\n        newArray.push({\n            'day': response[i]['day'],\n            'month': response[i]['month'],\n            'year': response[i]['year'],\n            'dayOfTheWeek': formatDayOfTheWeekDict[response[i]['dayOfTheWeek']],\n            'dayMonth': formatMonthDict[response[i]['month']] + ' ' + response[i]['day'],\n            'start': startTime,\n            'end': endTime,\n            'timeIntervals': determineInterval(startTime, endTime)\n        })\n    };\n    newArray\n    return newArray;\n}\n\nconst motiveIdDict = {\n    'technical' : '61eea350ddf6c500149ae2cb',\n    'cultural' : '61eea367ddf6c500149ae2cc',\n    'introduction' : '61379ba159d4940022b6c929',\n}\n\n\nexport const defaultQueryArgs = {\n    \"from\": '2022-02-07T23:00:00.000Z',\n    \"to\": '2022-02-16T23:00:00.000Z',\n    \"is_new_patient\": \"true\",\n    \"motive_id\": motiveIdDict['technical'],\n}\n\nexport default function getAgenda(queryArgs) {\n    const query = `https://staging-api.rosa.be/api/availabilities?from=${queryArgs['from']}&to=${queryArgs['to']}&motive_id=${queryArgs['motive_id']}&is_new_patient=${queryArgs['is_new_patient']}&calendar_ids=61379ba159d4940022b6c928&state=open`\n    console.log('AYMERIC')\n    return fetch(query)\n    .then((response) => response.json())\n    .then((json) => processDates(json))\n    .then((processedJson) => padIntervals(processedJson))\n    .catch((error) => {\n        console.log(error);\n    });\n};\n\n//test1 = getAgenda(queryArgs);\n\n//let response = '[{\"_id\":\"62026542fe7f580012fd6863\",\"eventIds\":[],\"motiveIds\":[\"61379ba159d4940022b6c929\",\"61eea350ddf6c500149ae2cb\",\"61eea367ddf6c500149ae2cc\"],\"state\":\"open\",\"dayOfTheWeek\":1,\"day\":21,\"month\":1,\"year\":2022,\"appointmentSlotId\":\"61fa4379723811001bbe0bc2\",\"startAt\":\"2022-02-21T08:30:00.000Z\",\"endAt\":\"2022-02-21T16:00:00.000Z\",\"duration\":450,\"calendarId\":\"61379ba159d4940022b6c928\",\"meridiem\":\"am\",\"nextAvailabilityId\":\"61fa4379723811001bbe0bc4\",\"__v\":0,\"createdAt\":\"2022-02-08T12:42:42.346Z\",\"updatedAt\":\"2022-02-08T12:42:42.346Z\",\"id\":\"62026542fe7f580012fd6863\"},{\"_id\":\"62026542fe7f580012fd6864\",\"eventIds\":[],\"motiveIds\":[\"61379ba159d4940022b6c929\",\"61eea367ddf6c500149ae2cc\"],\"state\":\"open\",\"dayOfTheWeek\":1,\"day\":21,\"month\":1,\"year\":2022,\"appointmentSlotId\":\"61fa4379723811001bbe0bc2\",\"startAt\":\"2022-02-21T17:15:00.000Z\",\"endAt\":\"2022-02-21T18:00:00.000Z\",\"duration\":45,\"calendarId\":\"61379ba159d4940022b6c928\",\"meridiem\":\"am\",\"previousAvailabilityId\":\"61fa4379723811001bbe0bc4\",\"__v\":0,\"createdAt\":\"2022-02-08T12:42:42.346Z\",\"updatedAt\":\"2022-02-08T12:42:42.346Z\",\"id\":\"62026542fe7f580012fd6864\"},{\"_id\":\"61fa4389fe7f580012fc6dc2\",\"eventIds\":[],\"motiveIds\":[\"61379ba159d4940022b6c929\",\"61eea350ddf6c500149ae2cb\",\"61eea367ddf6c500149ae2cc\"],\"state\":\"open\",\"meridiem\":\"am\",\"previousAvailabilityId\":null,\"nextAvailabilityId\":null,\"calendarId\":\"61379ba159d4940022b6c928\",\"appointmentSlotId\":\"61fa4389fe7f580012fc6dc0\",\"startAt\":\"2022-02-22T08:30:00.000Z\",\"endAt\":\"2022-02-22T18:00:00.000Z\",\"duration\":570,\"day\":22,\"month\":1,\"year\":2022,\"dayOfTheWeek\":2,\"__v\":0,\"createdAt\":\"2022-02-02T08:40:41.315Z\",\"updatedAt\":\"2022-02-02T08:40:41.315Z\",\"id\":\"61fa4389fe7f580012fc6dc2\"},{\"_id\":\"61fa43a0fe7f580012fc6dca\",\"eventIds\":[],\"motiveIds\":[\"61379ba159d4940022b6c929\",\"61eea350ddf6c500149ae2cb\",\"61eea367ddf6c500149ae2cc\"],\"state\":\"open\",\"meridiem\":\"pm\",\"previousAvailabilityId\":null,\"nextAvailabilityId\":null,\"calendarId\":\"61379ba159d4940022b6c928\",\"appointmentSlotId\":\"61fa43a0fe7f580012fc6dc8\",\"startAt\":\"2022-02-24T13:00:00.000Z\",\"endAt\":\"2022-02-24T18:00:00.000Z\",\"duration\":300,\"day\":24,\"month\":1,\"year\":2022,\"dayOfTheWeek\":4,\"__v\":0,\"createdAt\":\"2022-02-02T08:41:04.802Z\",\"updatedAt\":\"2022-02-02T08:41:04.802Z\",\"id\":\"61fa43a0fe7f580012fc6dca\"}]'\n//response = JSON.parse(response)\n"]},"metadata":{},"sourceType":"module"}