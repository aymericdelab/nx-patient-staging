{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Constants from 'expo-constants';\nimport Calendar from \"./components/Calendar.js\";\nimport FirstRdv from \"./components/FirstRdv.js\";\nimport DropDown from \"./components/DropDown.js\";\nimport getAgenda, { defaultQueryArgs } from \"./network/calendarAPI\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _React$useState = React.useState([{\n    \"dayOfTheWeek\": \"\",\n    \"day\": \"\",\n    \"timeIntervals\": ['']\n  }]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      useAgenda = _React$useState2[0],\n      setAgenda = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      useSelectedTime = _React$useState4[0],\n      setSelectedTime = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      useMsg = _React$useState6[0],\n      setMsg = _React$useState6[1];\n\n  var createAppointmentMsg = function createAppointmentMsg() {\n    setMsg((useFirstRdv ? \"First\" : \"Not First\") + \" \" + useReason + \" booked for \" + useSelectedTime);\n  };\n\n  var _React$useState7 = React.useState('cultural'),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      useReason = _React$useState8[0],\n      setReason = _React$useState8[1];\n\n  var _React$useState9 = React.useState(true),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      useFirstRdv = _React$useState10[0],\n      setFirstRdv = _React$useState10[1];\n\n  var query = defaultQueryArgs;\n\n  var setQuery = function setQuery(query, reason, first) {\n    query['is_new_patient'] = first;\n\n    if (reason == 'technical') {\n      query['motive_id'] = '61eea350ddf6c500149ae2cb';\n    } else {\n      if (reason == 'cultural') {\n        query['motive_id'] = '61eea367ddf6c500149ae2cc';\n      } else {\n        query['motive_id'] = '61379ba159d4940022b6c929';\n      }\n    }\n\n    return query;\n  };\n\n  React.useEffect(function () {\n    query = setQuery(query, useReason, useFirstRdv);\n  }, [useReason, useFirstRdv]);\n  React.useEffect(function () {\n    getAgenda(query).then(function (response) {\n      setAgenda(response);\n      console.log(response);\n    });\n  }, [query]);\n  return _jsxs(View, {\n    style: styles.bigContainer,\n    children: [_jsxs(View, {\n      style: styles.smallContainer,\n      children: [_jsx(View, {\n        style: styles.smallerContainer,\n        children: _jsx(Text, {\n          style: styles.header,\n          children: \" Find availability \"\n        })\n      }), _jsx(View, {\n        style: styles.smallerContainer,\n        children: _jsx(FirstRdv, {\n          useState: [useFirstRdv, setFirstRdv]\n        })\n      }), _jsx(View, {\n        style: styles.smallerContainer,\n        children: _jsx(DropDown, {\n          useState: [useReason, setReason]\n        })\n      }), _jsx(View, {\n        style: styles.smallerContainer,\n        children: _jsx(Calendar, {\n          data: useAgenda,\n          setTime: setSelectedTime\n        })\n      }), _jsx(View, {\n        style: styles.smallerContainer,\n        children: _jsx(Button, {\n          title: 'Book Appointment',\n          onPress: function onPress() {\n            return createAppointmentMsg();\n          }\n        })\n      }), _jsx(View, {\n        style: styles.smallerContainer,\n        children: _jsxs(Text, {\n          children: [\" \", useMsg, \" \"]\n        })\n      })]\n    }), _jsx(Button, {\n      title: \"hello\",\n      style: {\n        fontSize: \"5px\"\n      },\n      children: \" \"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  bigContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#FCF7F2',\n    padding: 8\n  },\n  smallContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#FFFFFF',\n    padding: 8\n  },\n  smallerContainer: {\n    marginBottom: \"20px\"\n  },\n  header: {\n    marginTop: \"20px\",\n    fontSize: \"28px\",\n    lineHeight: \"33px\",\n    letterSpacing: \"0.32px\",\n    fontFamily: \"Roboto,-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif\",\n    fontWeight: 500,\n    color: \"#814a58\"\n  }\n});","map":{"version":3,"sources":["/Users/aymericdelabrousse/Documents/git/nx_expo/rosa-nx-expo-workspace/apps/patient-staging-expo/App.tsx"],"names":["React","Constants","Calendar","FirstRdv","DropDown","getAgenda","defaultQueryArgs","App","useState","useAgenda","setAgenda","useSelectedTime","setSelectedTime","useMsg","setMsg","createAppointmentMsg","useFirstRdv","useReason","setReason","setFirstRdv","query","setQuery","reason","first","useEffect","then","response","console","log","styles","bigContainer","smallContainer","smallerContainer","header","fontSize","StyleSheet","create","flex","justifyContent","alignItems","paddingTop","statusBarHeight","backgroundColor","padding","marginBottom","marginTop","lineHeight","letterSpacing","fontFamily","fontWeight","color"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { useSetState } from 'react-use';\nimport Constants from 'expo-constants';\n\n// or any pure javascript modules available in npm\nimport Calendar from './components/Calendar.js'\nimport FirstRdv from './components/FirstRdv.js';\nimport DropDown from './components/DropDown.js';\n\nimport getAgenda, {defaultQueryArgs, motiveIdDict} from './network/calendarAPI'\n\n    \n//// dummy data\n//let data=[\n    //{\"dayOfTheWeek\": \"MA\", \"day\": \"fevr. 08\", \"timeIntervals\": ['-', '-', '-', '17h30']}, \n    //{\"dayOfTheWeek\": \"ME\", \"day\": \"fevr 09\",  \"timeIntervals\": ['9h00', '-', '-', '-']}, \n    //{\"dayOfTheWeek\": \"JE\", \"day\": \"fevr. 10\", \"timeIntervals\": ['-', '15h30', '-', '-']}\n    //];\n\nexport default function App() {\n\n    // use state to define getter and setter for calendar data\n    const [useAgenda, setAgenda] = React.useState([{\"dayOfTheWeek\": \"\", \"day\": \"\", \"timeIntervals\": ['']}])\n\n    // use state to define and use selected time by the user\n    const [useSelectedTime, setSelectedTime] = React.useState('')\n\n    // message to display\n    const [useMsg, setMsg] = React.useState('')\n\n    // callback when user is confirming time of appointment\n    const createAppointmentMsg = () => {\n        setMsg(`${useFirstRdv? \"First\": \"Not First\"} ${useReason} booked for ${useSelectedTime}`)\n    }\n\n    // define and use the query based on the user inputs\n    const [useReason, setReason] = React.useState('cultural'); \n    const [useFirstRdv, setFirstRdv] = React.useState(true);\n\n    // start with default arguments to show calendar\n    let query = defaultQueryArgs;\n\n    //const setQuery\n    const setQuery = (query: any, reason: string, first: boolean) => {\n      query['is_new_patient'] = first;\n      if (reason == 'technical') {\n        query['motive_id'] = '61eea350ddf6c500149ae2cb'\n      }\n      else {\n        if (reason == 'cultural') {\n          query['motive_id'] = '61eea367ddf6c500149ae2cc'\n\n        }\n        else {\n          query['motive_id'] = '61379ba159d4940022b6c929'\n        }\n      }\n      return query\n    }\n\n    React.useEffect(() => {\n     query = setQuery(query, useReason, useFirstRdv)\n    }, [useReason, useFirstRdv])\n\n    // use effect to avoid calling api at each render \n    React.useEffect(() => {\n      //setAgenda(data)\n      getAgenda(query).then((response: any) => {setAgenda(response); console.log(response)})\n    }, [query]);\n\n  return (\n    <View style={styles.bigContainer}>\n      <View style={styles.smallContainer}>\n        <View style={styles.smallerContainer}>\n          <Text style={styles.header}> Find availability </Text>\n        </View> \n        <View style={styles.smallerContainer}>\n          <FirstRdv useState={[useFirstRdv, setFirstRdv]}></FirstRdv>\n        </View> \n        <View style={styles.smallerContainer}>\n          <DropDown useState={[useReason, setReason]}></DropDown>\n        </View> \n        <View style={styles.smallerContainer}>\n          <Calendar data={useAgenda} setTime={setSelectedTime}></Calendar>\n        </View> \n        <View style={styles.smallerContainer}>\n          <Button title={'Book Appointment'} onPress={() => createAppointmentMsg()}/>\n        </View>\n        <View style={styles.smallerContainer}>\n          <Text> {useMsg} </Text>\n        </View>\n      </View>\n      <Button title=\"hello\" style={{fontSize: \"5px\"}}> </Button>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  bigContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#FCF7F2',\n    padding: 8,\n  },\n  smallContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#FFFFFF',\n    padding: 8,\n  },\n  smallerContainer: {\n    marginBottom: \"20px\",\n  },\n  header: {\n    marginTop: \"20px\",\n    fontSize: \"28px\",\n    lineHeight: \"33px\",\n    letterSpacing: \"0.32px\",\n    fontFamily: \"Roboto,-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif\",\n    fontWeight: 500,\n    color: \"#814a58\"\n  },\n});\n"]},"metadata":{},"sourceType":"module"}