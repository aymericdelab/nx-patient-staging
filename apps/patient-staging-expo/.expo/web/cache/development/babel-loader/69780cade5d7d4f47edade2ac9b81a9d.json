{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useSetState } from 'react-use';\nimport Constants from 'expo-constants';\nimport Calendar from \"./components/Calendar.js\";\nimport FirstRdv from \"./components/FirstRdv.js\";\nimport DropDown from \"./components/DropDown.js\";\nimport getAgenda, { defaultQueryArgs } from \"./network/calendarAPI\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useSetState = useSetState({\n    agenda: [{\n      \"dayOfTheWeek\": \"\",\n      \"day\": \"\",\n      \"timeIntervals\": ['']\n    }],\n    selectedTime: '',\n    msg: '',\n    selectedReason: 'cultural',\n    firstRdv: true\n  }),\n      _useSetState2 = _slicedToArray(_useSetState, 2),\n      state = _useSetState2[0],\n      setState = _useSetState2[1];\n\n  console.log(state.agenda);\n\n  var _React$useState = React.useState([{\n    \"dayOfTheWeek\": \"\",\n    \"day\": \"\",\n    \"timeIntervals\": ['']\n  }]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      useAgenda = _React$useState2[0],\n      setAgenda = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      useSelectedTime = _React$useState4[0],\n      setSelectedTime = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      useMsg = _React$useState6[0],\n      setMsg = _React$useState6[1];\n\n  var createAppointmentMsg = function createAppointmentMsg() {\n    setMsg(\"Appointment booked for \" + useSelectedTime);\n  };\n\n  var _React$useState7 = React.useState(defaultQueryArgs),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      useQuery = _React$useState8[0],\n      setQuery = _React$useState8[1];\n\n  React.useEffect(function () {\n    getAgenda(defaultQueryArgs).then(function (response) {\n      setAgenda(response);\n      console.log(response);\n    });\n  }, []);\n  return _jsx(View, {\n    style: styles.bigContainer,\n    children: _jsxs(View, {\n      style: styles.smallContainer,\n      children: [_jsx(View, {\n        children: _jsx(Text, {\n          children: \" Find availability \"\n        })\n      }), _jsx(FirstRdv, {}), _jsx(View, {\n        children: _jsx(DropDown, {})\n      }), _jsx(Calendar, {\n        data: useAgenda,\n        setTime: setSelectedTime\n      }), _jsx(View, {\n        children: _jsx(Button, {\n          title: 'Book Appointment',\n          onPress: function onPress() {\n            return createAppointmentMsg();\n          }\n        })\n      }), _jsx(View, {\n        children: _jsxs(Text, {\n          children: [\" \", useMsg, \" \"]\n        })\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  bigContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#FCF7F2',\n    padding: 8\n  },\n  smallContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#FFFFFF',\n    padding: 8\n  }\n});","map":{"version":3,"sources":["/Users/aymericdelabrousse/Documents/git/nx_expo/rosa-nx-expo-workspace/apps/patient-staging-expo/App.tsx"],"names":["React","useSetState","Constants","Calendar","FirstRdv","DropDown","getAgenda","defaultQueryArgs","App","agenda","selectedTime","msg","selectedReason","firstRdv","state","setState","console","log","useState","useAgenda","setAgenda","useSelectedTime","setSelectedTime","useMsg","setMsg","createAppointmentMsg","useQuery","setQuery","useEffect","then","response","styles","bigContainer","smallContainer","StyleSheet","create","flex","justifyContent","alignItems","paddingTop","statusBarHeight","backgroundColor","padding"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport { useSetState } from 'react-use';\nimport Constants from 'expo-constants';\n\n// or any pure javascript modules available in npm\nimport Calendar from './components/Calendar.js'\nimport FirstRdv from './components/FirstRdv.js';\nimport DropDown from './components/DropDown.js';\n\nimport getAgenda, {defaultQueryArgs} from './network/calendarAPI'\n    \n//// dummy data\n//let data=[\n    //{\"dayOfTheWeek\": \"MA\", \"day\": \"fevr. 08\", \"timeIntervals\": ['-', '-', '-', '17h30']}, \n    //{\"dayOfTheWeek\": \"ME\", \"day\": \"fevr 09\",  \"timeIntervals\": ['9h00', '-', '-', '-']}, \n    //{\"dayOfTheWeek\": \"JE\", \"day\": \"fevr. 10\", \"timeIntervals\": ['-', '15h30', '-', '-']}\n    //];\n\nexport default function App() {\n\n    const [state, setState] = useSetState({\n      agenda: [{\"dayOfTheWeek\": \"\", \"day\": \"\", \"timeIntervals\": ['']}],\n      selectedTime: '',\n      msg: '',\n      selectedReason: 'cultural',\n      firstRdv: true,\n    })\n    console.log(state.agenda)\n\n    // use state to define getter and setter for calendar data\n    const [useAgenda, setAgenda] = React.useState([{\"dayOfTheWeek\": \"\", \"day\": \"\", \"timeIntervals\": ['']}])\n\n    // use state to define and use selected time by the user\n    const [useSelectedTime, setSelectedTime] = React.useState('')\n\n    // message to display\n    const [useMsg, setMsg] = React.useState('')\n\n    // callback when user is confirming time of appointment\n    const createAppointmentMsg = () => {\n        setMsg(`Appointment booked for ${useSelectedTime}`)\n    }\n\n    // define and use the query based on the user inputs\n    const [useQuery, setQuery] = React.useState(defaultQueryArgs); \n\n    //const setQuery\n\n    // use effect to avoid calling api at each render \n    React.useEffect(() => {\n      //setAgenda(data)\n      getAgenda(defaultQueryArgs).then((response: any) => {setAgenda(response); console.log(response)})\n    }, []);\n\n  return (\n    <View style={styles.bigContainer}>\n      <View style={styles.smallContainer}>\n        <View>\n          <Text> Find availability </Text>\n        </View> \n        <FirstRdv ></FirstRdv>\n        <View>\n          <DropDown></DropDown>\n        </View> \n        <Calendar data={useAgenda} setTime={setSelectedTime}></Calendar>\n        <View>\n          <Button title={'Book Appointment'} onPress={() => createAppointmentMsg()}/>\n        </View>\n        <View>\n          <Text> {useMsg} </Text>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  bigContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#FCF7F2',\n    padding: 8,\n  },\n  smallContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: '#FFFFFF',\n    padding: 8,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}